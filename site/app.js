var app = angular.module("PL0InfiniteUI", ['ui.codemirror', 'ui.bootstrap']);

app.config(['$compileProvider',
function ($compileProvider) {
    $compileProvider.imgSrcSanitizationWhitelist(/^\s*(https?|blob|local|data):/);
}]);

app.constant("PL0Infinite", PL0Infinite);
app.constant("fn", fn);
app.constant("win32_encoded_header", "TVpgAQEAAAAEAAAA//8AAGABAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGlzIGEgV2luMzIgY29uc29sZSBhcHBsaWNhdGlvbi4gSXQgY2Fubm90IGJlIHJ1biB1bmRlciBNUy1ET1MuDQokAAAAAFBFAABMAQEAAABTTAAAAAAAAAAA4AACAQsBAQAABgAAAAAAAAAAAAAAFQAAABAAAAAgAAAAAEAAABAAAAACAAAEAAAAAAAAAAQAAAAAAAAAACAAAAACAAAAAAAAAwAAAAAAEAAAEAAAAAAQAAAQAAAAAAAAEAAAAAAAAAAAAAAAHBAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALnRleHQAAAAyBQAAABAAAAAGAAAAAgAAAAAAAAAAAAAAAAAAIAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABuEAAAfBAAAIwQAACYEAAApBAAALYQAAAAAAAAUhAAAAAAAAAAAAAARBAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEtFUk5FTDMyLmRsbAAAbhAAAHwQAACMEAAAmBAAAKQQAAC2EAAAAAAAAAAARXhpdFByb2Nlc3MAAABHZXRTdGRIYW5kbGUAAAAAUmVhZEZpbGUAAAAAV3JpdGVGaWxlAAAAR2V0Q29uc29sZU1vZGUAAAAAU2V0Q29uc29sZU1vZGUAAAAAAAAAAAAAUKIcEUAAMcADBSwRQAB1DWr1/xUEEEAAoywRQABqAGgwEUAAagFoHBFAAFD/FQwQQAAJwHUIagD/FQAQQACBPTARQAABAAAAdexYwwBXcml0ZSBlcnJvcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAxwAMFzBFAAHU3avb/FQQQQACjzBFAAGjQEUAAUP8VEBBAAIAl0BFAAPn/NdARQAD/NcwRQAD/FRQQQAChzBFAAGoAaNQRQABqAWi+EUAAUP8VCBBAAAnAYZB1CGoA/xUAEEAAD7YFvhFAAIE91BFAAAEAAAB0Bbj/////wwBSZWFkIGVycm9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgicYwwAIGdAhG6OH+///r8mGQwwAAAAAAAAAAAAAAAAQw6Mn+///DAAAAAAAAAACwDei5/v//sArosv7//8MAPQAAAIB1TrAt6KL+//+wAujL////sAHoxP///7AE6L3///+wB+i2////sATor////7AI6Kj///+wA+ih////sAbomv///7AE6JP///+wCOiM////wz0AAAAAfQtQsC3oTP7//1j32D0KAAAAD4zvAAAAPWQAAAAPjNEAAAA96AMAAA+MswAAAD0QJwAAD4yVAAAAPaCGAQB8ez1AQg8AfGE9gJaYAHxHPQDh9QV8LT0Aypo7fBO6AAAAALsAypo79/tS6Bj///9YugAAAAC7AOH1Bff7UugF////WLoAAAAAu4CWmAD3+1Lo8v7//1i6AAAAALtAQg8A9/tS6N/+//9YugAAAAC7oIYBAPf7UujM/v//WLoAAAAAuxAnAAD3+1Louf7//1i6AAAAALvoAwAA9/tS6Kb+//9YugAAAAC7ZAAAAPf7UuiT/v//WLoAAAAAuwoAAAD3+1LogP7//1joev7//8MA/xUAEEAAAAC5AAAAALMDUVPoov3//1tZPA0PhDQBAAA8CA+ElAAAADwtD4QJAQAAPDB82zw5f9csMID7AHTQgPsCdQyB+QAAAAB1BDwAdL+A+wN1CjwAdQSzAOsCswGB+czMzAx/qIH5NDMz83ygiMe4CgAAAPfpPQgAAIB0ET34//9/dROA/wd+Dul/////gP8ID492////uQAAAACI+YD7AnQEAcHrAynIkYj4UVPow/3//1tZ6VP///+A+wMPhEr///9RU7AI6Hr8//+wIOhz/P//sAjobPz//1tZgPsAdQezA+kl////gPsCdQ+B+QAAAAB1B7MD6RH///+JyLkKAAAAugAAAAA9AAAAAH0I99j3+ffY6wL3+YnBgfkAAAAAD4Xm/v//gPsCD4Td/v//swPp1v7//4D7Aw+Fzf7//7AtUVPo/fv//1tZswLpu/7//4D7Aw+Esv7//4D7AnUMgfkAAAAAD4Sh/v//UegU/f//WYnIww==");
app.constant("win32_symbols", {
    base: 0x00401500,
    baseSectionSize: 0x500,
    symbols: {
      readln: 0x00401390,
      write: 0x00401220,
      writeenter: 0x00401210,
      writestring: 0x004011e0,
      exit: 0x00401388
    }
});

app.constant("sources", {
  "bien-00.pl0": "var X, Y; \nprocedure INICIAR; \n  const Y = 2; \n  procedure ASIGNAR; \n    X := Y; \n  call ASIGNAR; \n\nbegin \n  write ('NUM='); readln (Y); \n  call INICIAR; \n  writeln ('NUM*2=',Y*X) \nend.",
  "bien-01.pl0": "VAR BASE, EXPO, RESU;\n\nPROCEDURE POT;\nIF EXPO > 0 THEN\n   BEGIN\n        RESU := RESU * BASE;\n        EXPO := EXPO - 1;\n        CALL POT\n   END;\n\nBEGIN\n     WRITE ('BASE: '); READLN(BASE);\n     WRITE ('EXPONENTE: '); READLN(EXPO);\n     RESU := 1;\n     CALL POT;\n     IF EXPO < 0 THEN RESU := 0;\n     WRITELN ('RESULTADO: ', RESU);\n     WRITELN\nEND.",
  "bien-02.pl0": "var X, Y, Z;\n\nprocedure MULTIPLICAR;\nvar A, B;\nbegin\n     A := X;\n     B := Y;\n     Z := 0;\n     if X < 0 then A := -A;\n     if Y < 0 then B := -B;\n     while B > 0 do\n         begin\n           if odd B then Z:= Z + A;\n           A := A * 2;\n           B := B / 2\n         end;\n     if X < 0 then Z:= -Z;\n     if Y < 0 then Z:= -Z\nend;\n\nBegin\n     write ('X: '); readLn (X);\n     write ('Y: '); readLn (Y);\n     call MULTIPLICAR;\n     writeLn ('X*Y=', Z);\nend.",
  "bien-03.pl0": "var X, Y, Q, R;\n\nprocedure DIVIDIR;\nvar V, W;\nbegin\n  Q := 0;\n  R := X; if R < 0 then R := -R;\n  W := Y; if W < 0 then W := -W;\n  V := Y; if V < 0 then V:= -V;\n  while W <= R do W := W * 2;\n  while W > V do\n    begin\n      Q := Q * 2; W := W / 2;\n      if W <= R then\n        begin\n          R := R - W; Q := Q + 1\n        end\n    end;\n  if X < 0 then R:= -R;\n  if X < 0 then Q:= -Q;\n  if Y < 0 then Q:= -Q;\nend;\n\nprocedure OTRO;\n  procedure DIVIDIR;\n  begin\n    Q := X / Y; R := X - Y * Q\n  end;\ncall DIVIDIR;\n\nprocedure SALIDA;\nbegin\n  write ('Cociente: ', Q); writeln;\n  write ('Resto: ', R); writeln;\nend;\n\nbegin\n  write ('Dividendo: '); readln (X);\n  write ('Divisor: '); readln (Y);\n  writeln;\n  if Y <> 0 then\n    begin\n      write ('Metodo 1'); writeln;\n      call DIVIDIR;\n      call SALIDA; writeln;\n      write ('Metodo 2'); writeln;\n      call OTRO;\n      call SALIDA;\n    end\nend.\n.",
  "bien-04.pl0": "var X, Y, Z;\n\nprocedure MCD;\nvar F,G;\nbegin\n  F := X; G := Y;\n  while F <> G do\n    begin\n      if F < G then  G := G - F;\n      IF G < F then  F := F - G\n    end;\n  Z:= F\nend;\n\nbegin\n  write ('X: '); readln (X);\n  if X > 0 then\n    begin\n      write ('Y: '); readln (Y);\n      if Y > 0 then\n        begin\n          call MCD;\n          writeln ('MCD: ', Z); writeln\n        end\n    end\nend.\n",
  "bien-05.pl0": "VAR R, N;\n\nPROCEDURE INICIALIZAR;\nCONST UNO = 1;\nR := -(-UNO);\n\nPROCEDURE RAIZ;\nBEGIN\n  CALL INICIALIZAR;\n  WHILE R * R < N DO R := R + 1\nEND;\n\nBEGIN\n  WRITE ('N: '); READLN (N);\n  WRITE ('RAIZ CUADRADA DE ', N, ': ');\n  IF N < 0 THEN WRITE ('ERROR');\n  IF N = 0 THEN WRITE (0);\n  IF N > 0 THEN\n    BEGIN\n      CALL RAIZ;\n      IF R*R<>N THEN WRITE (R - 1, '..');\n      WRITE (R);\n    END;\n  WRITELN\nEND.",
  "bien-06.pl0": "var IMPORTE, BILLETE, VUELTO, PESOS, CENTAVOS, VUELTOPESOS, VUELTOCENTAVOS,\n    IMPORTEOK, CENTAVOSOK, PESOSOK, BILLETEOK, VUELTOOK;\n\nprocedure ERROR;\nbegin\n  writeln ('VALOR FUERA DE RANGO!')\nend;\n\nbegin\n  WRITELN ('*******************************************');\n  writeLn ('VUELTO PARA IMPORTES PAGADOS CON UN BILLETE');\n  WRITELN ('*******************************************');\n  writeln;\n  IMPORTEOK := -1;\n  while IMPORTEOK <> 0 do\n    begin\n      writeln ('IMPORTE (min $0.01 y max $100.00)');\n      CENTAVOSOK := -1;\n      while CENTAVOSOK <> 0 do\n        begin\n          write ('CENTAVOS: '); readLn (CENTAVOS);\n          CENTAVOSOK := 0;\n          if CENTAVOS < 0 then CENTAVOSOK := -1;\n          if CENTAVOS > 99 then CENTAVOSOK := -1;\n          if CENTAVOSOK <> 0 then call ERROR\n        end;\n      PESOSOK := -1;\n      while PESOSOK <> 0 do\n        begin\n          write ('PESOS: '); readLn (PESOS);\n          PESOSOK := 0;\n          if PESOS < 0 then PESOSOK := -1;\n          if PESOS > 100 then PESOSOK := -1;\n          if PESOSOK <> 0 then call ERROR\n       end;\n      write ('IMPORTE: $', PESOS, '.');\n      if CENTAVOS < 10 then write ('0');\n      writeLn (CENTAVOS);\n      IMPORTE := PESOS * 100 + CENTAVOS;\n      IMPORTEOK := 0;\n      if IMPORTE < 1 then IMPORTEOK := -1;\n      if IMPORTE > 10000 then IMPORTEOK := -1;\n      if IMPORTEOK <> 0 then call ERROR\n    end;\n\n  VUELTOOK := -1;\n  while VUELTOOK <> 0 do\n    begin\n      BILLETEOK := -1;\n      while BILLETEOK <> 0 do\n        begin\n          write ('BILLETE (min $2 y max $100): $'); readLn (BILLETE);\n          BILLETEOK := -1;\n          if BILLETE = 2 then BILLETEOK := 0;\n          if BILLETE = 5 then BILLETEOK := 0;\n          if BILLETE = 10 then BILLETEOK := 0;\n          if BILLETE = 20 then BILLETEOK := 0;\n          if BILLETE = 50 then BILLETEOK := 0;\n          if BILLETE = 100 then BILLETEOK := 0;\n          if BILLETEOK <> 0 then writeln ('BILLETE INEXISTENTE!')\n        end;\n      VUELTO := BILLETE * 100 - IMPORTE;\n      VUELTOOK := 0;\n      if VUELTO < 0 then\n        begin\n          VUELTOOK := -1;\n          writeLn ('BILLETE INSUFICIENTE PARA EL PAGO!')\n        end\n    end;\n\n  VUELTOPESOS := VUELTO / 100;\n  VUELTOCENTAVOS := VUELTO - VUELTOPESOS * 100;\n\n  write ('Su vuelto: $', VUELTOPESOS, '.');\n  if VUELTOCENTAVOS < 10 then write ('0');\n  writeLn (VUELTOCENTAVOS);\n\n  writeLn;\n\n  if VUELTO >= 5000 then\n    begin\n      writeLn ('1 billete de $50');\n      VUELTO := VUELTO - 5000\n    end;\n\n  if VUELTO >= 2000 then\n    begin\n      if VUELTO / 2000 = 1 then writeLn ('1 billete de $20');\n      if VUELTO / 2000 <> 1 then writeLn ('2 billetes de $20');\n      VUELTO := VUELTO - VUELTO / 2000 * 2000\n    end;\n\n  if VUELTO >= 1000 then\n    begin\n      writeLn ('1 billete de $10');\n      VUELTO := VUELTO - 1000\n    end;\n\n  if VUELTO >= 500 then\n    begin\n      writeLn ('1 billete de $5');\n      VUELTO := VUELTO - 500\n    end;\n\n  if VUELTO >= 200 then\n    begin\n      if VUELTO / 200 = 1 then writeLn ('1 billete de $2');\n      if VUELTO / 200 <> 1 then writeLn ('2 billetes de $2');\n      VUELTO := VUELTO - VUELTO / 200 * 200\n    end;\n\n  if VUELTO >= 100 then\n    begin\n      writeLn ('1 moneda de $1');\n      VUELTO := VUELTO - 100\n    end;\n\n  if VUELTO >= 50 then\n    begin\n      writeLn ('1 moneda de 50 centavos');\n      VUELTO := VUELTO - 50\n    end;\n\n  if VUELTO >= 25 then\n    begin\n      writeLn ('1 moneda de 25 centavos');\n      VUELTO := VUELTO - 25\n    end;\n\n  if VUELTO >= 10 then\n    begin\n      if VUELTO / 10 = 1 then writeLn ('1 moneda de 10 centavos');\n      if VUELTO / 10 <> 1 then writeLn ('2 monedas de 10 centavos');\n      VUELTO := VUELTO - VUELTO / 10 * 10\n    end;\n\n  if VUELTO >= 5 then\n    begin\n      writeLn ('1 moneda de 5 centavos');\n      VUELTO := VUELTO - 5\n    end;\n\n  if VUELTO > 1 then writeLn (VUELTO, ' monedas de 1 centavo');\n  if VUELTO = 1 then writeLn ('1 moneda de 1 centavo')\n\nend.",
  "bien-07.pl0": "CONST N = 20;\n\nVAR A, B, C;\n\nPROCEDURE TRIANGULO;\nVAR A, B;\nBEGIN\n  WRITELN;\n  A := 15;\n  WHILE A > 0 DO\n    BEGIN\n      B := 0;\n      WHILE B < A DO\n        BEGIN\n          WRITE ('*');\n          B := B + 1\n        END;\n      WRITELN;\n      A := A - 1;\n    END\nEND;\n\nBEGIN\n  A := 1;\n  WHILE A <= N DO\n    BEGIN\n      WRITE (A, ' ');\n      A := A + 1\n    END;\n\n  CALL TRIANGULO;\n\n  B := -N;\n  C := 0;\n  WHILE B < C DO\n    BEGIN\n      WRITE (B, ' ');\n      B := B + 1\n    END;\n  WRITELN;\n\nEND.",
  "bien-08.pl0": "var K;\nprocedure P;\n  procedure coma;\n  begin\n    write (',');\n    K := K + 1;\n    call P\n  end;\nbegin\n  if K < 10 then\n    begin\n      write (K);\n      call coma;\n    end\nend;\n\nbegin\n  K := 1;\n  call P;\n  writeln (10)\nend.",
  "bien-09.pl0": ".",
  "mal-00.pl0": "var X, Y;\n\nprocedure INICIAR;\n  const Y = 2;\n  procedure ASIGNAR;\n    X = Y;\n  call ASIGNAR;\n\nbegin\n  write ('NUM=') readln (Y);\n  call INICIAR;\n  writeln (\"NUM*2=\",Y*X)\nend.",
  "mal-01.pl0": "VAR BASE, EXPO, RESU;\n\nPROCEDUR POT;\nIF EXPO > 0 THEN\n   BEGIN\n        RESU = RESU * BASE;\n        EXPO := EXPO - 1;\n        CALL POT\n   END;\n\nBEGIN\n     WRITE ('BASE: '); READLN(BASE);\n     WRITE ('EXPONENTE: '); READLN(EXPO)\n     RESU := 1;\n     CALL POT;\n     IF EXPO < 0  RESU := 0;\n     WRITELN ('RESULTADO: ', RESU);\n     WRITELN\nEND.",
  "mal-02.pl0": "var X, Y, Z;\n\nprocedure MULTIPLICAR;\nvar A, B, A;\nbegin\n     A := X;\n     B := Y;\n     Z := 0;\n     if X < 0 then A := -A;\n     if Y ( 0 then B := -B;\n     while B > 0 then\n         begin\n           if odd B then Z:= Z + A;\n           A := A * 2;\n           B := B / 2\n         end;\n     if X < 0 then Z:= -Z;\n     if Y < 0 then Z:= -Z\nend;\n\nBegin\n     write ('X: '); readLn X;\n     write ('Y: '); readLn (Y);\n     MULTIPLICAR;\n     writeLn ('X*Y=', Z);\nend.",
  "mal-03.pl0": "var DO, X, Y, Q, R;\n\nprocedure DIVIDIR;\nvar V W;\nbegin\n  Q := 0;\n  R := X; if R < 0 then R := -R;\n  W := Y; if W < 0 then W := -W;\n  V := Y; if V < 0 then V:= -V;\n  while W <= R do W := W * 2;\n  while W > V do\n    begin\n      Q := Q * 2; W := W / 2;\n      if W <= R then\n        begin\n          R := R - W; Q := Q + 1\n        end\n    end;\n  if X < 0 then R:= -R;\n  if X < 0 then Q:= -Q;\n  if Y < 0 then Q:= -Q;\nend;\n\nprocedure OTRO;\n  procedure DIVIDIR;\n  begin\n    Q := X / Y; R := X - Y * Q\n  end;\ncall DIVIDIR;\n\nprocedure SALIDA;\nbegin\n  write ('Cociente: ', Q); writeln;\n  write ('Resto: ', R); writeln;\nend;\n\nbegin\n  write ('Dividendo: '); readln (X);\n  write ('Divisor: '); readln (Y);\n  writeln;\n  if Y <> 0 then\n    begin\n      write ('Metodo 1'); writeln;\n      call DIVIDIR;\n      call SALIDA; writeln;\n      write ('Metodo 2'); writeln;\n      call OTRO;\n      call SALIDA;\n    end\nend\nend",
  "mal-04.pl0": "var X, Y Z;\n\nprocedure MCD\nvar F,G;\nbegin\n  F := X; G := Y;\n  while F <> G do\n    begin\n      if F < G then  G := G - F;\n      IF G < F then  F := F - G\n    end;\n  Z:= F\nend;\n\nbegin\n  do write ('X: '); readln (X);\n  if X > 0 then\n    begin\n      write ('Y: '); readln (Y);\n      if Y > 0 then\n        begin\n          call MCD;\n          writeln ('MCD: ', Z); writeln ()\n        end\n    end\nend.",
  "mal-05.pl0": "VAR R, N;\n\nPROCEDURE INICIALIZAR;\nCONST UNO = ;\nR := -(-UNO);\n\nPROCEDURE RAIZ;\nBEGIN\n  CALL N;\n  WHILE R * R < N DO R := R + 1\nEND;\n\nBEGIN\n  WRITE ('N: '); READLN (N);\n  WRITE ('RAIZ CUADRADA DE ', N, ': ');\n  IF N < 0 THEN WRITE ('ERROR');\n  IF N = 0 THEN WRITE (0);\n  IF N > 0 THEN\n    BEGIN\n      CALL RAIZ;\n      IF R* <>N THEN WRITE (R - 1, '..');\n      WRITE (R);\n    END;\n  WRITELN\nEND.",
  "mal-06.pl0": "CONST K1=1, K2=2, K3=3, K4=4, K5=5, K6=6, K7=7, K8=8, K9=9, K10=10,\nK11=11, K12=12, K13=13, K14=14, K15=15, K16=16, K17=17, K18=18, K19=19, K20=20,\nK21=21, K22=22, K23=23, K24=24, K25=25, K26=26, K27=27, K28=28, K29=29, K30=30,\nK31=31, K32=32, K33=33, K34=34, K35=35, K36=36, K37=37, K38=38, K39=39, K40=40,\nK41=41, K42=42, K43=43, K44=44, K45=45, K46=46, K47=47, K48=48, K49=49, K50=50,\nK51=51, K52=52, K53=53, K54=54, K55=55, K56=56, K57=57, K58=58, K59=59, K60=60,\nK61=61, K62=62, K63=63, K64=64, K65=65, K66=66, K67=67, K68=68, K69=69, K70=70,\nK71=71, K72=72, K73=73, K74=74, K75=75, K76=76, K77=77, K78=78, K79=79, K80=80,\nK81=81, K82=82, K83=83, K84=84, K85=85, K86=86, K87=87, K88=88, K89=89, K90=90,\nK91=91, K92=92, K93=93, K94=94, K95=95, K96=96, K97=97, K98=98, K99=99, K100=100,\nK101=101, K102=102, K103=103, K104=104, K105=105, K106=106, K107=107, K108=108, K109=109, K110=110,\nK111=111, K112=112, K113=113, K114=114, K115=115, K116=116, K117=117, K118=118, K119=119, K120=120,\nK121=121, K122=122, K123=123, K124=124, K125=125, K126=126, K127=127, K128=128, K129=129, K130=130,\nK131=131, K132=132, K133=133, K134=134, K135=135, K136=136, K137=137, K138=138, K139=139, K140=140,\nK141=141, K142=142, K143=143, K144=144, K145=145, K146=146, K147=147, K148=148, K149=149, K150=150,\nK151=151, K152=152, K153=153, K154=154, K155=155, K156=156, K157=157, K158=158, K159=159, K160=160,\nK161=161, K162=162, K163=163, K164=164, K165=165, K166=166, K167=167, K168=168, K169=169, K170=170,\nK171=171, K172=172, K173=173, K174=174, K175=175, K176=176, K177=177, K178=178, K179=179, K180=180,\nK181=181, K182=182, K183=183, K184=184, K185=185, K186=186, K187=187, K188=188, K189=189, K190=190,\nK191=191, K192=192, K193=193, K194=194, K195=195;\n\nvar IMPORTE, BILLETE, VUELTO, PESOS, CENTAVOS, VUELTOPESOS, VUELTOCENTAVOS,\n    IMPORTEOK, CENTAVOSOK, PESOSOK, BILLETEOK, VUELTOOK,\nDEMASIADOLARGO1234567890123456789012345678901234567890123456789012345678901234567890,\nV1, V2, V3, V4, V5, V6, V7, V8, V9, V10,\nV11, V12, V13, V14, V15, V16, V17, V18, V19, V20,\nV21, V22, V23, V24, V25, V26, V27, V28, V29, V30,\nV31, V32, V33, V34, V35, V36, V37, V38, V39, V40,\nV41, V42, V43, V44, V45, V46, V47, V48, V49, V50,\nV51, V52, V53, V54, V55, V56, V57, V58, V59, V60,\nV61, V62, V63, V64, V65, V66, V67, V68, V69, V70,\nV71, V72, V73, V74, V75, V76, V77, V78, V79, V80,\nV81, V82, V83, V84, V85, V86, V87, V88, V89, V90,\nV91, V92, V93, V94, V95, V96, V97, V98, V99, V100,\nV101, V102, V103, V104, V105, V106, V107, V108, V109, V110,\nV111, V112, V113, V114, V115, V116, V117, V118, V119, V120,\nV121, V122, V123, V124, V125;\n\nprocedure ERROR;\nbegin\n  writeln ('VALOR FUERA DE RANGO!')\nend;\n\nbegin\n  WRITELN ('*******************************************');\n  writeLn ('VUELTO PARA IMPORTES PAGADOS CON UN BILLETE');\n  WRITELN ('*******************************************');\n  writeln;\n  IMPORTEOK := -1;\n  while IMPORTEOK <> 0 do\n    begin\n      writeln ('IMPORTE (min $0.01 y max $100.00)');\n      CENTAVOSOK := -1;\n      while CENTAVOSOK <> 0 do\n        begin\n          write ('CENTAVOS: '); readLn (CENTAVOS);\n          CENTAVOSOK := 0;\n          if CENTAVOS < 0 then CENTAVOSOK := -1;\n          if CENTAVOS > 99 then CENTAVOSOK := -1;\n          if CENTAVOSOK <> 0 then call ERROR\n        end;\n      PESOSOK := -1;\n      while PESOSOK <> 0 do\n        begin\n          write ('PESOS: '); readLn (PESOS);\n          PESOSOK := 0;\n          if PESOS < 0 then PESOSOK := -1;\n          if PESOS > 100 then PESOSOK := -1;\n          if PESOSOK <> 0 then call ERROR\n       end;\n      write ('IMPORTE: $', PESOS, '.');\n      if CENTAVOS < 10 then write ('0');\n      writeLn (CENTAVOS);\n      IMPORTE := PESOS * 100 + CENTAVOS;\n      IMPORTEOK := 0;\n      if IMPORTE < 1 then IMPORTEOK := -1;\n      if IMPORTE > 10000 then IMPORTEOK := -1;\n      if IMPORTEOK <> 0 then call ERROR\n    end;\n\n  VUELTOOK := -1;\n  while VUELTOOK <> 0 do\n    begin\n      BILLETEOK := -1;\n      while BILLETEOK <> 0 do\n        begin\n          write ('BILLETE (min $2 y max $100): $'); readLn (BILLETE);\n          BILLETEOK := -1;\n          if BILLETE = 2 then BILLETEOK := 0;\n          if BILLETE = 5 then BILLETEOK := 0;\n          if BILLETE = 10 then BILLETEOK := 0;\n          if BILLETE = 20 then BILLETEOK := 0;\n          if BILLETE = 50 then BILLETEOK := 0;\n          if BILLETE = 100 then BILLETEOK := 0;\n          if BILLETEOK <> 0 then writeln ('BILLETE INEXISTENTE!')\n        end;\n      VUELTO := BILLETE * 100 - IMPORTE;\n      VUELTOOK := 0;\n      if VUELTO < 0 then\n        begin\n          VUELTOOK := -1;\n          writeLn ('BILLETE INSUFICIENTE PARA EL PAGO!')\n        end\n    end;\n\n  VUELTOPESOS := VUELTO / 100;\n  VUELTOCENTAVOS := VUELTO - VUELTOPESOS * 100;\n\n  write ('Su vuelto: $', VUELTOPESOS, '.');\n  if VUELTOCENTAVOS < 10 then write ('0');\n  writeLn (VUELTOCENTAVOS);\n\n  writeLn;\n\n  if VUELTO >= 5000 then\n    begin\n      writeLn ('1 billete de $50');\n      VUELTO := VUELTO - 5000\n    end;\n\n  if VUELTO >= 2000 then\n    begin\n      if VUELTO / 2000 = 1 then writeLn ('1 billete de $20');\n      if VUELTO / 2000 <> 1 then writeLn ('2 billetes de $20');\n      VUELTO := VUELTO - VUELTO / 2000 * 2000\n    end;\n\n  if VUELTO >= 1000 then\n    begin\n      writeLn ('1 billete de $10');\n      VUELTO := VUELTO - 1000\n    end;\n\n  if VUELTO >= 500 then\n    begin\n      writeLn ('1 billete de $5');\n      VUELTO := VUELTO - 500\n    end;\n\n  if VUELTO >= 200 then\n    begin\n      if VUELTO / 200 = 1 then writeLn ('1 billete de $2');\n      if VUELTO / 200 <> 1 then writeLn ('2 billetes de $2');\n      VUELTO := VUELTO - VUELTO / 200 * 200\n    end;\n\n  if VUELTO >= 100 then\n    begin\n      writeLn ('1 moneda de $1');\n      VUELTO := VUELTO - 100\n    end;\n\n  if VUELTO >= 50 then\n    begin\n      writeLn ('1 moneda de 50 centavos');\n      VUELTO := VUELTO - 50\n    end;\n\n  if VUELTO >= 25 then\n    begin\n      writeLn ('1 moneda de 25 centavos');\n      VUELTO := VUELTO - 25\n    end;\n\n  if VUELTO >= 10 then\n    begin\n      if VUELTO / 10 = 1 then writeLn ('1 moneda de 10 centavos');\n      if VUELTO / 10 <> 1 then writeLn ('2 monedas de 10 centavos');\n      VUELTO := VUELTO - VUELTO / 10 * 10\n    end;\n\n  if VUELTO >= 5 then\n    begin\n      writeLn ('1 moneda de 5 centavos');\n      VUELTO := VUELTO - 5\n    end;\n\n  if VUELTO > 1 then writeLn (VUELTO, ' monedas de 1 centavo');\n  if VUELTO = 1 then writeLn ('1 moneda de 1 centavo');\n\n  WRITELN ('***************************************************************\n***************************************************************************\n***************************************************************************\n*************************************************************************');\n\n  WRITELN ('************************************************************************************************************************************************************************************************************************************************************');\n\n  WRITELN ('************************************************************************************************************************************************************************************************************************************************************)\n\nend.",
  "mal-07.pl0": "CONST N 20;\n\nVAR A, B, C;\n\nPROCEDURE TRI#NGULO;\nVAR A, B;\nBEGIN\n  WRITELN;\n  A := 15;\n  WHILE A > 0 DO\n    BEGIN\n      B := 0;\n      WHILE B < A DO\n        BEGIN\n          WRITE ('*')\n          B := B + 1\n        END;\n      WRITELN;\n      A := A - 1;\n    END\nEND;\n\nBEGIN\n  A := 111111111111111111;\n  WHILE A <= N DO\n    BEGIN\n      WRITE (A, ' ');\n      A := A + TRIANGULO\n    END;\n\n  CALL TRIANGULO;\n\n  B := -N;\n  C := 0;\n  WHILE B < C DO\n    BEGIN\n      WRITE (B, ' ');\n      B := B + 1\n    END;\n  WRITELN;\n\nEND.",
  "mal-08.pl0": "var K;\nprocedure P;\n  procedure coma;\n  begin\n    write (',')\n    K := K + 1;\n    call P\n  end;\nbegin\n  if K < 10 then\n    begin\n      write coma;\n      call K;\n    end\nend;\n\nbegin\n  K := 1;\n  call P;\n  writeln (10)\n",
  "mal-09.pl0": "",
});